{"ast":null,"code":"var _jsxFileName = \"/Users/chrishar/Desktop/untitled folder/edvora/src/components/PaginatedItems.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport '../style/paginatedItems.css';\nimport moment from 'moment';\nimport useWindowDimensions from '../hooks/useWindowDimensions'; // Example items, to simulate fetching from another resources.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Items(_ref) {\n  let {\n    currentItems\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.length > 0 && currentItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-slider-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-card-top\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"card-image\",\n          src: item.image,\n          alt: \"product-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: item.product_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: item.brand_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"$ \", item.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"state\",\n          children: [\"  \", item.address.state]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"city\",\n          children: item.address.city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"date\",\n          children: [\"Date: \", moment(item.date).format('DD:MM:YYYY')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"discription\",\n          children: [\" \", item.discription]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n\n_c = Items;\nexport default function PaginatedItems(_ref2) {\n  _s();\n\n  let {\n    itemsPerPage,\n    posts\n  } = _ref2;\n  const {\n    width\n  } = useWindowDimensions(); // We start with an empty list of items.\n\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    setCurrentItems(posts.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(posts.length / itemsPerPage));\n  }, [posts, itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % posts.length; //   `User requested page number ${event.selected}, which is offset ${newOffset}`\n\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: width < 500 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"items\",\n        children: /*#__PURE__*/_jsxDEV(Items, {\n          currentItems: currentItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n        className: \"pagination\",\n        breakLabel: \"...\",\n        nextLabel: \">\",\n        onPageChange: handlePageClick,\n        pageRangeDisplayed: 5,\n        pageCount: pageCount,\n        previousLabel: \"< \",\n        renderOnZeroPageCount: null,\n        previousLinkClassName: \"previous\",\n        nextLinkClassName: \"next\",\n        pageLinkClassName: \"paginatedNumber\",\n        pageClassName: \"break\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"items\",\n        children: /*#__PURE__*/_jsxDEV(Items, {\n          currentItems: currentItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n        className: \"pagination\",\n        breakLabel: \"...\",\n        nextLabel: \">\",\n        onPageChange: handlePageClick,\n        pageRangeDisplayed: 5,\n        pageCount: pageCount,\n        previousLabel: \"< \",\n        renderOnZeroPageCount: null,\n        previousLinkClassName: \"previous\",\n        nextLinkClassName: \"next\",\n        pageLinkClassName: \"paginatedNumber\",\n        pageClassName: \"break\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n_s(PaginatedItems, \"DlBWUr6W8TINFBESmbLfPfBcyLg=\", false, function () {\n  return [useWindowDimensions];\n});\n\n_c2 = PaginatedItems;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"PaginatedItems\");","map":{"version":3,"sources":["/Users/chrishar/Desktop/untitled folder/edvora/src/components/PaginatedItems.js"],"names":["React","useEffect","useState","ReactPaginate","moment","useWindowDimensions","Items","currentItems","length","map","item","index","image","product_name","brand_name","price","address","state","city","date","format","discription","PaginatedItems","itemsPerPage","posts","width","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","slice","Math","ceil","handlePageClick","event","newOffset","selected"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport '../style/paginatedItems.css'\nimport moment from 'moment';\nimport useWindowDimensions from '../hooks/useWindowDimensions';\n// Example items, to simulate fetching from another resources.\n\n\nfunction Items({ currentItems }) {\n  return (\n    <>\n    {/* {console.log('currentItems',currentItems)} */}\n      {currentItems && currentItems.length > 0 &&   \n        currentItems.map((item,index) => (\n            \n          <div className='card-slider-container' key={index}>\n              <div className='inner-card-top'>\n            <img className='card-image' src={item.image} alt='product-img' />\n            <div >\n            <h3>{item.product_name}</h3>\n            <h4>{item.brand_name}</h4>\n            <h4>$ {item.price}</h4>\n            </div>\n            </div>\n\n            <div>\n            <h4 className='state'>  {item.address.state}</h4>\n            <h4 className='city'>{item.address.city}</h4>\n            <h4 className='date'>Date: {moment(item.date).format('DD:MM:YYYY')}</h4>\n            <h4 className='discription'> {item.discription}</h4>\n          \n            </div>\n          </div>\n        ))}\n    </>\n  );\n}\n\nexport default function PaginatedItems({ itemsPerPage,posts }) {\n     \n    const {width}= useWindowDimensions();\n  // We start with an empty list of items.\n  \n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n   \n    setCurrentItems(posts.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(posts.length / itemsPerPage));\n \n  }, [posts,itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n      \n    const newOffset = (event.selected * itemsPerPage) % posts.length;\n   \n    //   `User requested page number ${event.selected}, which is offset ${newOffset}`\n  \n    setItemOffset(newOffset);\n  };\n\n  return (\n    <>\n    {width < 500 ?\n    <>\n    <div className='items'>\n      <Items currentItems={currentItems}  />\n      </div>\n      <ReactPaginate\n      className='pagination'\n        breakLabel=\"...\"\n        nextLabel=\">\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel=\"< \"\n        renderOnZeroPageCount={null}\n        previousLinkClassName=\"previous\"\n        nextLinkClassName=\"next\"\n        pageLinkClassName=\"paginatedNumber\"\n        pageClassName=\"break\"\n      \n      />\n      </>\n      :\n      <>\n      <div className='items'>\n      <Items currentItems={currentItems}  />\n      </div>\n      <ReactPaginate\n      className='pagination'\n        breakLabel=\"...\"\n        nextLabel=\">\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel=\"< \"\n        renderOnZeroPageCount={null}\n        previousLinkClassName=\"previous\"\n        nextLinkClassName=\"next\"\n        pageLinkClassName=\"paginatedNumber\"\n        pageClassName=\"break\"\n      \n      />\n      </>\n    }\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}