{"ast":null,"code":"var _jsxFileName = \"/Users/chrishar/Desktop/untitled folder/edvora/src/components/PaginatedItems.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate'; // Example items, to simulate fetching from another resources.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\nfunction Items(_ref) {\n  let {\n    currentItems\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n\n_c = Items;\nexport default function PaginatedItems(_ref2) {\n  _s();\n\n  let {\n    itemsPerPage,\n    posts\n  } = _ref2;\n  console.log('psososos', posts);\n  console.log('items', items); // We start with an empty list of items.\n\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`); // setCurrentItems(posts.slice(itemOffset, endOffset));\n\n    setPageCount(Math.ceil(posts.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % posts.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c2 = PaginatedItems;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"PaginatedItems\");","map":{"version":3,"sources":["/Users/chrishar/Desktop/untitled folder/edvora/src/components/PaginatedItems.js"],"names":["React","useEffect","useState","ReactPaginate","items","Items","currentItems","map","item","PaginatedItems","itemsPerPage","posts","console","log","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","Math","ceil","length","handlePageClick","event","newOffset","selected"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,gBAA1B,C,CAEA;;;;AACA,MAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,CAAd;;AAEA,SAASC,KAAT,OAAiC;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AAC/B,sBACE;AAAA,cACGA,YAAY,IACXA,YAAY,CAACC,GAAb,CAAkBC,IAAD,iBACf;AAAA,6BACE;AAAA,6BAAWA,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAFJ,mBADF;AAUD;;KAXQH,K;AAaT,eAAe,SAASI,cAAT,QAAgD;AAAA;;AAAA,MAAxB;AAAEC,IAAAA,YAAF;AAAeC,IAAAA;AAAf,GAAwB;AAC3DC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBF,KAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBT,KAApB,EAF2D,CAG7D;;AACA,QAAM,CAACE,YAAD,EAAeQ,eAAf,IAAkCZ,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C,CAL6D,CAM7D;AACA;;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,CAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMkB,SAAS,GAAGF,UAAU,GAAGP,YAA/B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBI,UAAW,OAAME,SAAU,EAA7D,EAHc,CAId;;AACAH,IAAAA,YAAY,CAACI,IAAI,CAACC,IAAL,CAAUV,KAAK,CAACW,MAAN,GAAeZ,YAAzB,CAAD,CAAZ;AACD,GANQ,EAMN,CAACO,UAAD,EAAaP,YAAb,CANM,CAAT,CAV6D,CAkB7D;;AACA,QAAMa,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBhB,YAAlB,GAAkCC,KAAK,CAACW,MAA1D;AACAV,IAAAA,OAAO,CAACC,GAAR,CACG,8BAA6BW,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAD7E;AAGAP,IAAAA,aAAa,CAACO,SAAD,CAAb;AACD,GAND;;AAQA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,YAAY,EAAEnB;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AACE,MAAA,UAAU,EAAC,KADb;AAEE,MAAA,SAAS,EAAC,QAFZ;AAGE,MAAA,YAAY,EAAEiB,eAHhB;AAIE,MAAA,kBAAkB,EAAE,CAJtB;AAKE,MAAA,SAAS,EAAER,SALb;AAME,MAAA,aAAa,EAAC,YANhB;AAOE,MAAA,qBAAqB,EAAE;AAPzB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAcD;;GAzCuBN,c;;MAAAA,c","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\n\n// Example items, to simulate fetching from another resources.\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\nfunction Items({ currentItems }) {\n  return (\n    <>\n      {currentItems &&\n        currentItems.map((item) => (\n          <div>\n            <h3>Item #{item}</h3>\n          </div>\n        ))}\n    </>\n  );\n}\n\nexport default function PaginatedItems({ itemsPerPage,posts }) {\n    console.log('psososos',posts)\n    console.log('items',items)\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    // setCurrentItems(posts.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(posts.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % posts.length;\n    console.log(\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n\n  return (\n    <>\n      <Items currentItems={currentItems} />\n      <ReactPaginate\n        breakLabel=\"...\"\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel=\"< previous\"\n        renderOnZeroPageCount={null}\n      />\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}