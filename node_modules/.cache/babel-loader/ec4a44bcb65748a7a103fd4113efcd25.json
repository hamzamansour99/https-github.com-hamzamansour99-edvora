{"ast":null,"code":"var _jsxFileName = \"/Users/chrishar/Desktop/untitled folder/edvora/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Posts from './components/Posts';\nimport Pagination from './components/Pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [product, Setproduct] = useState('0');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  const fetchPosts = async () => {\n    setLoading(true);\n    const res = await axios.get('https://assessment-edvora.herokuapp.com');\n    setPosts(res.data);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  function compareName(a, b) {\n    // converting to uppercase to have case-insensitive comparison\n    const product_name1 = a.product_name.toUpperCase();\n    const product_name2 = b.product_name.toUpperCase();\n    let comparison = 0;\n\n    if (product_name1 > product_name2) {\n      comparison = 1;\n    } else if (product_name1 < product_name2) {\n      comparison = -1;\n    }\n\n    return comparison;\n  }\n\n  function group(posts) {\n    let map = new Map(posts.map(o => [o.product_name, []]));\n\n    for (let o of posts) map.get(o.product_name).push(o);\n\n    return [...[...map.values()].filter(_ref => {\n      let {\n        length\n      } = _ref;\n      return length > 1;\n    }), [...map.values()].filter(_ref2 => {\n      let {\n        length\n      } = _ref2;\n      return length === 1;\n    }).flat()];\n  } //Get current posts\n  // let indexOfLastPost = currentPage *  postsPerPage;\n  // const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  // const currentPosts  = group(posts.sort(compareName)).slice(indexOfFirstPost,indexOfLastPost);\n\n\n  const currentPosts = group(posts.sort(compareName)); // Change Page\n  // const  paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  const seen = new Set();\n  const filteredArr = posts.filter(el => {\n    const duplicate = seen.has(el.product_name);\n    seen.add(el.product_name);\n    return !duplicate;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"App\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [console.log('uniqueObjects', filteredArr), console.log('product', product), /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"/action_page.php\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"products\",\n          children: \"Prodcuts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"products\",\n          id: \"products\",\n          onChange: e => {\n            Setproduct(e.target.value);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 0,\n            children: \" -- Select Category -- \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 3\n          }, this), filteredArr.map((fil, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: fil.product_name,\n              children: fil.product_name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), Object.keys(currentPosts).map(key => {\n      var _currentPosts$key$key;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: (_currentPosts$key$key = currentPosts[key][key]) === null || _currentPosts$key$key === void 0 ? void 0 : _currentPosts$key$key.product_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Posts, {\n          posts: currentPosts[key],\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 14\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n} // <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} />\n\n\n_s(App, \"q9D4FUKYPTxe7pgVo1xBQV2lh/Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chrishar/Desktop/untitled folder/edvora/src/App.js"],"names":["React","useState","useEffect","axios","Posts","Pagination","App","posts","setPosts","loading","setLoading","product","Setproduct","currentPage","setCurrentPage","postsPerPage","fetchPosts","res","get","data","compareName","a","b","product_name1","product_name","toUpperCase","product_name2","comparison","group","map","Map","o","push","values","filter","length","flat","currentPosts","sort","seen","Set","filteredArr","el","duplicate","has","add","console","log","e","target","value","fil","index","Object","keys","key"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Posts from './components/Posts';\nimport Pagination from './components/Pagination';\n\n\n\nfunction App() {\n\n  const [posts,setPosts]=useState([]);\n  const [loading,setLoading]= useState(false);\n  const [product,Setproduct] = useState('0');\n  const [currentPage,setCurrentPage]=useState(1);\n  const [postsPerPage]=useState(10);\n\n  const fetchPosts = async ()=>{\n    setLoading(true);\n    const res = await axios.get('https://assessment-edvora.herokuapp.com');\n    setPosts(res.data);\n    setLoading(false);\n  }\n  useEffect(()=>{\n    fetchPosts();\n  },[]); \n\n  function compareName(a, b) {\n\n    // converting to uppercase to have case-insensitive comparison\n    const product_name1 =  a.product_name.toUpperCase();\n    const product_name2 =  b.product_name.toUpperCase();\n\n    let comparison = 0;\n\n    if (product_name1 > product_name2) {\n        comparison = 1;\n    } else if (product_name1 < product_name2) {\n        comparison = -1;\n    }\n    return comparison;\n}\n\nfunction group(posts) {\n  let map = new Map(posts.map(o => [o.product_name, []]));\n  for (let o of posts) map.get(o.product_name).push(o);\n \n  return [\n      ...[...map.values()].filter(({length}) => length > 1),\n      [...map.values()].filter(({length}) => length === 1).flat()\n    \n  ];\n\n \n}\n\n  //Get current posts\n\n  // let indexOfLastPost = currentPage *  postsPerPage;\n  // const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  // const currentPosts  = group(posts.sort(compareName)).slice(indexOfFirstPost,indexOfLastPost);\n\n  const currentPosts  = group(posts.sort(compareName));\n\n  // Change Page\n\n  // const  paginate = (pageNumber) => setCurrentPage(pageNumber);\n  const seen = new Set();\n\n  const filteredArr = posts.filter(el => {\n    const duplicate = seen.has(el.product_name);\n    seen.add(el.product_name);\n    return !duplicate;\n  });\n\n  return (\n\n    <div>\n    \n     \n      App\n      <div>\n        {console.log('uniqueObjects',filteredArr)}\n        {console.log('product',product)}\n      <form action=\"/action_page.php\">\n  <label htmlFor=\"products\">Prodcuts</label>\n  <select name=\"products\" id=\"products\" onChange={(e)=>{Setproduct(e.target.value)}}>\n  <option value={0}> -- Select Category -- </option>   \n    {filteredArr.map((fil,index)=>{\n      return  <option  key={index} value={fil.product_name}>{fil.product_name}</option>\n    })}\n  \n  </select>\n  <br/><br/>\n  <input type=\"submit\" value=\"Submit\"/>\n</form>\n      </div>\n      \n          {Object.keys(currentPosts).map((key) => {\n\n         \n         return (\n          <div key={key}>\n       \n          <h1>{currentPosts[key][key]?.product_name}</h1>\n         \n\n             <Posts  posts={currentPosts[key]} loading={loading}/>  \n\n          {/* {currentPosts[key].map((dataItem,index) => {\n                 return (    <div key={index}>\n   \n            </div>\n                 )\n           })} */}\n      \n       </div>\n\n\n        \n    \n           \n         )\n       })}\n      \n    \n     \n    </div>\n  );\n}\n\n// <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} />\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}