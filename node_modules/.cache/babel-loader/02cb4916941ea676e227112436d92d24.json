{"ast":null,"code":"var _jsxFileName = \"/Users/chrishar/Desktop/untitled folder/edvora/src/components/PaginatedItems.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport '../style/paginatedItems.css';\nimport moment from 'moment'; // Example items, to simulate fetching from another resources.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\nfunction Items(_ref) {\n  let {\n    currentItems\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.length > 0 && currentItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-slider-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Brand Name \", item.brand_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Price \", item.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"State \", item.address.state]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"City \", item.address.city]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Date \", moment(item.date).format('DD:MM:YYYY')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n\n_c = Items;\nexport default function PaginatedItems(_ref2) {\n  _s();\n\n  let {\n    itemsPerPage,\n    posts\n  } = _ref2;\n  // console.log('psososos',posts)\n  // console.log('items',items)\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage; // console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n\n    setCurrentItems(posts.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(posts.length / itemsPerPage));\n  }, [posts, itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % posts.length; // console.log(\n    //   `User requested page number ${event.selected}, which is offset ${newOffset}`\n    // );\n\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      className: \"pagination\",\n      breakLabel: \"...\",\n      nextLabel: \">\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 4,\n      pageCount: pageCount,\n      previousLabel: \"< \",\n      renderOnZeroPageCount: null,\n      previousLinkClassName: \"previous\",\n      nextLinkClassName: \"previous\",\n      pageLinkClassName: \"paginatedNumber\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c2 = PaginatedItems;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"PaginatedItems\");","map":{"version":3,"sources":["/Users/chrishar/Desktop/untitled folder/edvora/src/components/PaginatedItems.js"],"names":["React","useEffect","useState","ReactPaginate","moment","items","Items","currentItems","length","map","item","index","brand_name","price","address","state","city","date","format","PaginatedItems","itemsPerPage","posts","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","slice","Math","ceil","handlePageClick","event","newOffset","selected"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport '../style/paginatedItems.css'\nimport moment from 'moment';\n// Example items, to simulate fetching from another resources.\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\nfunction Items({ currentItems }) {\n  return (\n    <>\n    {/* {console.log('currentItems',currentItems)} */}\n      {currentItems && currentItems.length > 0 &&   \n        currentItems.map((item,index) => (\n            \n          <div className='card-slider-container' key={index}>\n                \n            <h3>Brand Name {item.brand_name}</h3>\n\n            <h3>Price {item.price}</h3>\n            <h4>State {item.address.state}</h4>\n            <h4>City {item.address.city}</h4>\n            <h4>Date {moment(item.date).format('DD:MM:YYYY')}</h4>\n            \n          </div>\n        ))}\n    </>\n  );\n}\n\nexport default function PaginatedItems({ itemsPerPage,posts }) {\n     \n    // console.log('psososos',posts)\n    // console.log('items',items)\n  // We start with an empty list of items.\n  \n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    // console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(posts.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(posts.length / itemsPerPage));\n \n  }, [posts,itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n      \n    const newOffset = (event.selected * itemsPerPage) % posts.length;\n    // console.log(\n    //   `User requested page number ${event.selected}, which is offset ${newOffset}`\n    // );\n    setItemOffset(newOffset);\n  };\n\n  return (\n    <>\n      <Items currentItems={currentItems} />\n      <ReactPaginate\n      className='pagination'\n        breakLabel=\"...\"\n        nextLabel=\">\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={4}\n        pageCount={pageCount}\n        previousLabel=\"< \"\n        renderOnZeroPageCount={null}\n        previousLinkClassName=\"previous\"\n        nextLinkClassName=\"previous\"\n        pageLinkClassName=\"paginatedNumber\"\n      />\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}