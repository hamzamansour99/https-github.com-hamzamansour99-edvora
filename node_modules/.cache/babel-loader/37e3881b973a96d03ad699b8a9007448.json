{"ast":null,"code":"var _jsxFileName = \"/Users/chrishar/Desktop/untitled folder/edvora/src/components/Posts.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Posts(_ref) {\n  let {\n    posts,\n    loading\n  } = _ref;\n  var valueArr = posts.map(function (item) {\n    return item.product_name;\n  });\n  var isDuplicate = valueArr.some(function (item, idx) {\n    return valueArr.indexOf(item) !== idx;\n  });\n\n  function group(posts) {\n    let map = new Map(posts.map(o => [o.product_name, []]));\n\n    for (let o of posts) map.get(o.product_name).push(o);\n\n    return [...[...map.values()].filter(_ref2 => {\n      let {\n        length\n      } = _ref2;\n      return length > 1;\n    }), [...map.values()].filter(_ref3 => {\n      let {\n        length\n      } = _ref3;\n      return length === 1;\n    }).flat()];\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [console.log('isDuplicate', isDuplicate), console.log('group', group(posts)), isDuplicate ? posts.map((post, index) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [post.product_name, ' ', post.brand_name, ' ', post.price, ' ', post.brand_name]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/chrishar/Desktop/untitled folder/edvora/src/components/Posts.js"],"names":["React","Posts","posts","loading","valueArr","map","item","product_name","isDuplicate","some","idx","indexOf","group","Map","o","get","push","values","filter","length","flat","console","log","post","index","brand_name","price"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,KAAT,OAAgC;AAAA,MAAjB;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAiB;AAG5B,MAAIC,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAU,UAASC,IAAT,EAAc;AAAE,WAAOA,IAAI,CAACC,YAAZ;AAA0B,GAApD,CAAf;AACA,MAAIC,WAAW,GAAGJ,QAAQ,CAACK,IAAT,CAAc,UAASH,IAAT,EAAeI,GAAf,EAAmB;AAC/C,WAAON,QAAQ,CAACO,OAAT,CAAiBL,IAAjB,MAA2BI,GAAlC;AACH,GAFiB,CAAlB;;AAIA,WAASE,KAAT,CAAeV,KAAf,EAAsB;AAClB,QAAIG,GAAG,GAAG,IAAIQ,GAAJ,CAAQX,KAAK,CAACG,GAAN,CAAUS,CAAC,IAAI,CAACA,CAAC,CAACP,YAAH,EAAiB,EAAjB,CAAf,CAAR,CAAV;;AACA,SAAK,IAAIO,CAAT,IAAcZ,KAAd,EAAqBG,GAAG,CAACU,GAAJ,CAAQD,CAAC,CAACP,YAAV,EAAwBS,IAAxB,CAA6BF,CAA7B;;AACrB,WAAO,CACH,GAAG,CAAC,GAAGT,GAAG,CAACY,MAAJ,EAAJ,EAAkBC,MAAlB,CAAyB;AAAA,UAAC;AAACC,QAAAA;AAAD,OAAD;AAAA,aAAcA,MAAM,GAAG,CAAvB;AAAA,KAAzB,CADA,EAEH,CAAC,GAAGd,GAAG,CAACY,MAAJ,EAAJ,EAAkBC,MAAlB,CAAyB;AAAA,UAAC;AAACC,QAAAA;AAAD,OAAD;AAAA,aAAcA,MAAM,KAAK,CAAzB;AAAA,KAAzB,EAAqDC,IAArD,EAFG,CAAP;AAIH;;AAGD,MAAGjB,OAAH,EAAW;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAGD,sBACI;AAAA,eAGAkB,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0Bd,WAA1B,CAHA,EAIAa,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBV,KAAK,CAACV,KAAD,CAAzB,CAJA,EAMFM,WAAW,GAELN,KAAK,CAACG,GAAN,CAAU,CAACkB,IAAD,EAAMC,KAAN,KAAc;AAEnB,0BAAO;AAAA,mBAEHD,IAAI,CAAChB,YAFF,EAGH,GAHG,EAIHgB,IAAI,CAACE,UAJF,EAKH,GALG,EAMHF,IAAI,CAACG,KANF,EAOH,GAPG,EAQHH,IAAI,CAACE,UARF;AAAA,SAASD,KAAT;AAAA;AAAA;AAAA;AAAA,cAAP;AAYJ,KAdD,CAFK,gBAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBT;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH;;KAtDQvB,K;AAwDT,eAAeA,KAAf","sourcesContent":["import React from 'react'\n\nfunction Posts({posts,loading}) {\n\n\n    var valueArr = posts.map(function(item){ return item.product_name });\n    var isDuplicate = valueArr.some(function(item, idx){ \n        return valueArr.indexOf(item) !== idx \n    });\n\n    function group(posts) {\n        let map = new Map(posts.map(o => [o.product_name, []]));\n        for (let o of posts) map.get(o.product_name).push(o);\n        return [\n            ...[...map.values()].filter(({length}) => length > 1),\n            [...map.values()].filter(({length}) => length === 1).flat()\n        ];\n    }\n\n  \n    if(loading){\n        return <h2>Loading...</h2>\n    }\n\n   \n    return (\n        <ul>\n            {/* {console.log('posts',posts)}\n            {console.log('valueArr',valueArr)} */}\n       {console.log('isDuplicate',isDuplicate)}\n       {console.log('group',group(posts))}\n\n     {isDuplicate ?\n\n            posts.map((post,index)=>{\n              \n                 return <li key={index}>\n                   \n                    {post.product_name}\n                    {' '}\n                    {post.brand_name}\n                    {' '}\n                    {post.price}\n                    {' '}\n                    {post.brand_name}\n                   </li>  \n             \n                  \n            }\n                )       \n                :<div>\n                    hey\n                </div>\n                }\n        </ul>\n    )\n}\n\nexport default Posts\n"]},"metadata":{},"sourceType":"module"}